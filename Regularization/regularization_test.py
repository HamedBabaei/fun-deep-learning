import unittest
import numpy as np
import dnn

class TestRegularizationDNNMethods(unittest.TestCase):

    def test_compute_cost_with_regularization(self):
        parameters = {'W1': np.array([[ 1.62434536, -0.61175641, -0.52817175],
                                   [-1.07296862,  0.86540763, -2.3015387 ]]),
                        'b1': np.array([[ 1.74481176],[-0.7612069 ]]),
                        'W2': np.array([[ 0.3190391 , -0.24937038],
                                     [ 1.46210794, -2.06014071],
                                     [-0.3224172 , -0.38405435]]),
                        'b2': np.array([[ 1.13376944],[-1.09989127],[-0.17242821]]),
                        'W3': np.array([[-0.87785842,  0.04221375,  0.58281521]]),
                        'b3': np.array([[-1.10061918]])}
        Y = np.array([[1, 1, 0, 1, 0]])
        AL = np.array([[0.40682402, 0.01629284, 0.16722898, 0.10118111, 0.40682402]])
        l2 = dnn.compute_cost(AL, Y, parameters, lambd=0.1)
        self.assertEqual(str(l2)[:7], str(1.78648))
    
    def test_L_backward_regularization_test(self):
        X = np.array([[ 1.62434536, -0.61175641, -0.52817175, -1.07296862,  0.86540763],
                        [-2.3015387 ,  1.74481176, -0.7612069 ,  0.3190391 , -0.24937038],
                        [ 1.46210794, -2.06014071, -0.3224172 , -0.38405435,  1.13376944]])
        Y = np.array([[1, 1, 0, 1, 0]])
        cache = (np.array([[-1.52855314,  3.32524635,  2.13994541,  2.60700654, -0.75942115],
                        [-1.98043538,  4.1600994 ,  0.79051021,  1.46493512, -0.45506242]]),
                np.array([[0.        , 3.32524635, 2.13994541, 2.60700654, 0.        ],
                          [0.        , 4.1600994 , 0.79051021, 1.46493512, 0.        ]]),
                np.array([[-1.09989127, -0.17242821, -0.87785842],[ 0.04221375,  0.58281521, -1.10061918]]),
                np.array([[1.14472371],[0.90159072]]),
                np.array([[ 0.53035547,  5.94892323,  2.31780174,  3.16005701,  0.53035547],
                        [-0.69166075, -3.47645987, -2.25194702, -2.65416996, -0.69166075],
                        [-0.39675353, -4.62285846, -2.61101729, -3.22874921, -0.39675353]]),
                np.array([[0.53035547, 5.94892323, 2.31780174, 3.16005701, 0.53035547],
                            [0.        , 0.        , 0.        , 0.        , 0.        ],
                            [0.        , 0.        , 0.        , 0.        , 0.        ]]),
                np.array([[ 0.50249434,  0.90085595], [-0.68372786, -0.12289023],[-0.93576943, -0.26788808]]),
                np.array([[ 0.53035547], [-0.69166075],[-0.39675353]]),
                np.array([[-0.3771104 , -4.10060224, -1.60539468, -2.18416951, -0.3771104 ]]),
                np.array([[0.40682402, 0.01629284, 0.16722898, 0.10118111, 0.40682402]]),
                np.array([[-0.6871727 , -0.84520564, -0.67124613]]),
                np.array([[-0.0126646]]))
        grads = dnn.L_model_backward(X, Y, cache, L2_regularization_value=0.7/X.shape[1])
        print(grads)
        
if __name__ == '__main__':
    unittest.main()
